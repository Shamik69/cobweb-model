import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn import preprocessing
import warnings

'''
considering a linear demand and supply curve
'''


def cobweb(a0: float, b0: float, a1: float, b1: float, x0: float, t: float, p0: float = 0):
    '''
    given variables
    a0: intercept of the demand curve(+ve)
    b0: slope of the demand curve(-ve)
    a1: intercept of the supply curve(-ve)
    b1: slope of the supply curve(+ve)
    t: period
    x0: period0 price

    generated variables
    x1: period1 price
    pp: intertemporal eqm price
    time_path: time path
    dd: eqm demand
    ss: eqm supply
    in eqm condition dd and ss should and would be the same
    '''

    x1 = ((a1 - a0) + (b1 * x0))/b0
    dd = a0 + b0 * x1
    ss = a1 + b1 * x0
    pp = -((a0 - a1) / (b0 - b1))
    time_path = ((p0 - pp) * (b0 / b1) ** t) + pp
    
    return [t, round(x1, 2), round(dd, 2), round(time_path, 2)]


def generator(cobweb_params: list, path: str):
    print(cobweb_params)
    data_storage= []
    loops= 1000
    if len(cobweb_params)!=4:
        warnings.warn_explicit(f'cobweb_params takes exactly 4 arguments\n{len(cobweb_params)} provided')
        quit()
    for i in range(2):
        if cobweb_params[i+1]>0:
            cobweb_params[i+1]*=-1
        if cobweb_params[i*3]<0:
            cobweb_params[i*3]*=-1
    b= cobweb_params[3]/cobweb_params[1]
    if abs(b)>1:
        ratio_exp= 0.95
        b1= cobweb_params[3]
        n= 100
        for i in range(n):
            err= ratio_expabs(b)
            b1+=err
            if abs(b)< ratio_exp:
                break
        cobweb_params[3]= b1
    # calling data generator
    x0= 15
    for i in range(loops):
        data= cobweb(
            a0= cobweb_params[0], b0= cobweb_params[1],
            a1= cobweb_params[2], b1= cobweb_params[3],
            t= i, x0= x0, p0= x0)
        data_storage.append(data)
        if round(data[1], 2)==round(x0, 2):
            break
        x0= data[1]
    sns.set()
    pd.DataFrame(data= data_storage, columns=['periods', 'price', 'quantity', 'time path']).to_csv(
            f'{path}/data/cobweb_autogenerated.csv', index= False)
    print(cobweb_params)

x= [round(i, 2) for i in np.random.normal(loc=10.0, scale=5.0, size=4)]

generator(cobweb_params= [2.04, 6.2, 5.72, 13.55],
        path = 'C:/Users/User/PycharmProjects/cobweb-model')